/* Auto-generated by genmsg_cpp for file /home/gianluca/Programmazione/Robot_programming_project/safeteleoperation/gradient_map/msg/GradientMap.msg */
#ifndef GRADIENT_MAP_MESSAGE_GRADIENTMAP_H
#define GRADIENT_MAP_MESSAGE_GRADIENTMAP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace gradient_map
{
template <class ContainerAllocator>
struct GradientMap_ {
  typedef GradientMap_<ContainerAllocator> Type;

  GradientMap_()
  : size_x(0)
  , size_y(0)
  , map()
  {
  }

  GradientMap_(const ContainerAllocator& _alloc)
  : size_x(0)
  , size_y(0)
  , map(_alloc)
  {
  }

  typedef int32_t _size_x_type;
  int32_t size_x;

  typedef int32_t _size_y_type;
  int32_t size_y;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _map_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  map;


  ROS_DEPRECATED uint32_t get_map_size() const { return (uint32_t)map.size(); }
  ROS_DEPRECATED void set_map_size(uint32_t size) { map.resize((size_t)size); }
  ROS_DEPRECATED void get_map_vec(std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) const { vec = this->map; }
  ROS_DEPRECATED void set_map_vec(const std::vector<double, typename ContainerAllocator::template rebind<double>::other > & vec) { this->map = vec; }
private:
  static const char* __s_getDataType_() { return "gradient_map/GradientMap"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "a6366eb8d1d67d7bdd566f6df18f355a"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int32 size_x\n\
int32 size_y\n\
float64[] map\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, size_x);
    ros::serialization::serialize(stream, size_y);
    ros::serialization::serialize(stream, map);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, size_x);
    ros::serialization::deserialize(stream, size_y);
    ros::serialization::deserialize(stream, map);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(size_x);
    size += ros::serialization::serializationLength(size_y);
    size += ros::serialization::serializationLength(map);
    return size;
  }

  typedef boost::shared_ptr< ::gradient_map::GradientMap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gradient_map::GradientMap_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GradientMap
typedef  ::gradient_map::GradientMap_<std::allocator<void> > GradientMap;

typedef boost::shared_ptr< ::gradient_map::GradientMap> GradientMapPtr;
typedef boost::shared_ptr< ::gradient_map::GradientMap const> GradientMapConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::gradient_map::GradientMap_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::gradient_map::GradientMap_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace gradient_map

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::gradient_map::GradientMap_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::gradient_map::GradientMap_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::gradient_map::GradientMap_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a6366eb8d1d67d7bdd566f6df18f355a";
  }

  static const char* value(const  ::gradient_map::GradientMap_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa6366eb8d1d67d7bULL;
  static const uint64_t static_value2 = 0xdd566f6df18f355aULL;
};

template<class ContainerAllocator>
struct DataType< ::gradient_map::GradientMap_<ContainerAllocator> > {
  static const char* value() 
  {
    return "gradient_map/GradientMap";
  }

  static const char* value(const  ::gradient_map::GradientMap_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::gradient_map::GradientMap_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 size_x\n\
int32 size_y\n\
float64[] map\n\
\n\
";
  }

  static const char* value(const  ::gradient_map::GradientMap_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::gradient_map::GradientMap_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.size_x);
    stream.next(m.size_y);
    stream.next(m.map);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GradientMap_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gradient_map::GradientMap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::gradient_map::GradientMap_<ContainerAllocator> & v) 
  {
    s << indent << "size_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.size_x);
    s << indent << "size_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.size_y);
    s << indent << "map[]" << std::endl;
    for (size_t i = 0; i < v.map.size(); ++i)
    {
      s << indent << "  map[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.map[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // GRADIENT_MAP_MESSAGE_GRADIENTMAP_H

